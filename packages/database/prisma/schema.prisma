generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String             @id @default(cuid())
  email         String             @unique
  name          String?
  avatar        String?
  points        Int                @default(0)
  totalCheckIns Int                @default(0)
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  checkIns      ValidatedCheckIn[]
  
  // Subscription & Token System
  subscription      UserSubscription?
  tokenBalance      TokenBalance?
  tokenTransactions TokenTransaction[]
  redemptions       TokenRedemption[]
  
  // Referral System
  referralCode      String?  @unique
  referredBy        User?    @relation("Referrals", fields: [referredById], references: [id])
  referredById      String?
  referrals         User[]   @relation("Referrals")
  
  // Streak System
  streak            UserStreak?
  streakHistory     StreakHistory[]
  currentStreak     Int      @default(0)
  longestStreak     Int      @default(0)
  lastCheckInDate   DateTime?
  
  // Geofence System
  savedPOIs         SavedPOI[]
  geofences         UserGeofence[]
  notifications     PushNotification[]
  
  // QR Code System
  usedQRCodes       QRCode[]
  
  // Push Settings
  fcmToken          String?
  pushEnabled       Boolean  @default(true)
  geofenceEnabled   Boolean  @default(true)
  notificationQuota Int      @default(5)
  timezone          String?  @default("Asia/Seoul")
}

model POI {
  id           String             @id @default(cuid())
  name         String
  category     String
  lat          Float
  lng          Float
  thumbnailUrl String?
  visitCount   Int                @default(0)
  status       String             @default("active")
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  checkIns     ValidatedCheckIn[]
  campaigns    Campaign[]
  
  // H3 Geospatial Index
  h3Index      String?
  h3Resolution Int                @default(10)
  
  // QR Code System
  qrCodes      QRCode[]
  
  // Geofence System
  savedBy      SavedPOI[]
  geofences    UserGeofence[]

  @@index([lat, lng])
  @@index([h3Index])
}

model Merchant {
  id            String         @id @default(cuid())
  email         String         @unique
  businessName  String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  sponsorWallet SponsorWallet?
  campaigns     Campaign[]
  
  // Subscription System
  subscription      MerchantSubscription?
  redemptions       TokenRedemption[]
  qrCodes           QRCode[]
}

model SponsorWallet {
  id         String              @id @default(cuid())
  merchant   Merchant            @relation(fields: [merchantId], references: [id], onDelete: Cascade)
  merchantId String              @unique
  balance    Decimal             @default(0) @db.Decimal(12, 2)
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @updatedAt
  txs        CreditTransaction[]
}

model CreditTransaction {
  id         String        @id @default(cuid())
  wallet     SponsorWallet @relation(fields: [walletId], references: [id], onDelete: Cascade)
  walletId   String
  type       String
  amount     Decimal       @db.Decimal(12, 2)
  campaign   Campaign?     @relation(fields: [campaignId], references: [id])
  campaignId String?
  createdAt  DateTime      @default(now())

  @@index([walletId, createdAt])
}

model Campaign {
  id              String             @id @default(cuid())
  merchant        Merchant           @relation(fields: [merchantId], references: [id], onDelete: Cascade)
  merchantId      String
  poi             POI                @relation(fields: [poiId], references: [id], onDelete: Cascade)
  poiId           String
  name            String
  status          String             @default("ACTIVE")
  budgetTotal     Decimal            @db.Decimal(12, 2)
  budgetSpent     Decimal            @default(0) @db.Decimal(12, 2)
  cpcvAmount      Decimal            @default(700) @db.Decimal(8, 2)
  distribution    Json               @default("{\"user\":0.7,\"platform\":0.25,\"network\":0.05}")
  startDate       DateTime
  endDate         DateTime
  totalCheckIns   Int                @default(0)
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  checkIns        ValidatedCheckIn[]
  transactions    CreditTransaction[]
  
  // Subscription Model Fields
  maxCheckInsPerMonth Int    @default(150)
  checkInsThisMonth   Int    @default(0)
  priority            Int    @default(0)
  tokensPerCheckIn    Int    @default(100)

  @@index([merchantId, status])
  @@index([poiId, status])
}

model ValidatedCheckIn {
  id           String    @id @default(cuid())
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  poi          POI       @relation(fields: [poiId], references: [id], onDelete: Cascade)
  poiId        String
  campaign     Campaign? @relation(fields: [campaignId], references: [id], onDelete: SetNull)
  campaignId   String?
  userLat      Float
  userLng      Float
  accuracy     Float
  distance     Int
  verified     Boolean   @default(true)
  fraudScore   Float     @default(0)
  deviceInfo   Json?
  ipAddress    String?
  pointsEarned Int       @default(0)
  checkedAt    DateTime  @default(now())
  
  // Token System
  tokensEarned     Int              @default(0)
  tokenTransaction TokenTransaction?
  userTier         SubscriptionTier @default(FREE)
  
  // QR Code System
  checkInMethod    CheckInMethod    @default(GPS)
  qrCode           QRCode?          @relation(fields: [qrCodeId], references: [id])
  qrCodeId         String?
  
  // Streak System
  streakDay        Int?             @default(0)
  streakBonus      Int              @default(0)
  streakHistory    StreakHistory?

  @@index([userId, checkedAt])
  @@index([poiId, checkedAt])
  @@index([campaignId, checkedAt])
}

// ============================================
// SUBSCRIPTION & TOKEN SYSTEM
// ============================================

model UserSubscription {
  id                String   @id @default(cuid())
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String   @unique
  
  tier              SubscriptionTier @default(FREE)
  status            SubscriptionStatus @default(ACTIVE)
  
  // Billing
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  cancelAtPeriodEnd  Boolean @default(false)
  
  // Usage tracking (for Free tier limits)
  checkInsThisMonth  Int     @default(0)
  checkInLimit       Int     @default(3) // 3 for FREE, -1 for PREMIUM (unlimited)
  
  // Payment
  stripeCustomerId   String?
  stripeSubscriptionId String?
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@index([userId, status])
}

enum SubscriptionTier {
  FREE
  PREMIUM
}

enum SubscriptionStatus {
  ACTIVE
  PAST_DUE
  CANCELED
  TRIALING
}

model MerchantSubscription {
  id                String   @id @default(cuid())
  merchant          Merchant @relation(fields: [merchantId], references: [id], onDelete: Cascade)
  merchantId        String   @unique
  
  plan              MerchantPlan @default(STARTER)
  status            SubscriptionStatus @default(ACTIVE)
  
  // Billing
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  cancelAtPeriodEnd  Boolean @default(false)
  
  // Usage tracking
  checkInsThisMonth  Int     @default(0)
  checkInLimit       Int     @default(50) // 50/150/400 based on plan
  activeCampaigns    Int     @default(0)
  campaignLimit      Int     @default(1)  // 1/3/-1 based on plan
  
  // Overage billing
  overageCheckIns    Int     @default(0)
  overageRate        Decimal @default(3000) @db.Decimal(8, 2) // ₩3,000 per extra check-in
  
  // Payment
  stripeCustomerId   String?
  stripeSubscriptionId String?
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@index([merchantId, status])
}

enum MerchantPlan {
  STARTER  // ₩299K/month, 50 check-ins, 1 campaign
  GROWTH   // ₩699K/month, 150 check-ins, 3 campaigns
  PRO      // ₩1,499K/month, 400 check-ins, unlimited campaigns
}

model TokenBalance {
  id              String   @id @default(cuid())
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String   @unique
  
  balance         Int      @default(0) // Current token balance
  totalEarned     Int      @default(0) // Lifetime earned
  totalRedeemed   Int      @default(0) // Lifetime redeemed
  totalExpired    Int      @default(0) // Expired tokens
  
  lastEarnedAt    DateTime?
  lastRedeemedAt  DateTime?
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  transactions    TokenTransaction[]
  
  @@index([userId])
}

model TokenTransaction {
  id              String   @id @default(cuid())
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade, map: "TokenTransaction_user_fkey")
  userId          String
  balance         TokenBalance @relation(fields: [userId], references: [userId], onDelete: Cascade, map: "TokenTransaction_balance_fkey")
  
  type            TokenTransactionType
  amount          Int      // Positive for earn, negative for redeem
  
  // Context
  checkIn         ValidatedCheckIn? @relation(fields: [checkInId], references: [id])
  checkInId       String?  @unique
  redemption      TokenRedemption? @relation(fields: [redemptionId], references: [id])
  redemptionId    String?
  
  // Expiry (tokens expire after 12 months)
  expiresAt       DateTime?
  expired         Boolean  @default(false)
  
  description     String?
  metadata        Json?
  
  createdAt       DateTime @default(now())
  
  @@index([userId, createdAt])
  @@index([expiresAt, expired])
}

enum TokenTransactionType {
  EARN_CHECKIN      // Earned from check-in
  EARN_REFERRAL     // Earned from referring friend
  EARN_BONUS        // Bonus from streak/event
  REDEEM_VOUCHER    // Redeemed for voucher
  REDEEM_MERCHANT   // Redeemed at merchant
  EXPIRE            // Tokens expired
  ADMIN_ADJUSTMENT  // Manual adjustment
}

model TokenRedemption {
  id              String   @id @default(cuid())
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  
  tokensUsed      Int      // 5,000 tokens
  voucherValue    Decimal  @db.Decimal(10, 2) // ₩5,000
  
  status          RedemptionStatus @default(PENDING)
  
  // Voucher details
  voucherCode     String   @unique
  merchant        Merchant? @relation(fields: [merchantId], references: [id])
  merchantId      String?
  
  // Usage
  usedAt          DateTime?
  expiresAt       DateTime // 30 days validity
  
  // Accounting (deferred cost tracking)
  actualCost      Decimal  @db.Decimal(10, 2) // ₩5,000 when redeemed
  recorded        Boolean  @default(false) // For accounting sync
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  transactions    TokenTransaction[]
  
  @@index([userId, status])
  @@index([voucherCode])
  @@index([expiresAt, status])
}

enum RedemptionStatus {
  PENDING   // Created, not used yet
  USED      // Redeemed at merchant
  EXPIRED   // Voucher expired
  CANCELED  // User canceled
}

// ============================================
// QR CODE SYSTEM
// ============================================

model QRCode {
  id          String   @id @default(cuid())
  poi         POI      @relation(fields: [poiId], references: [id], onDelete: Cascade)
  poiId       String   @unique
  merchant    Merchant @relation(fields: [merchantId], references: [id], onDelete: Cascade)
  merchantId  String
  
  token       String   @unique
  qrCodeUrl   String
  qrCodeImage String   @db.Text
  version     Int      @default(1)
  status      QRCodeStatus @default(ACTIVE)
  
  // Single-use enforcement
  used          Boolean   @default(false)
  usedAt        DateTime?
  usedByUserId  String?
  usedByUser    User?     @relation(fields: [usedByUserId], references: [id], onDelete: SetNull)
  
  scansTotal  Int      @default(0)
  scansToday  Int      @default(0)
  lastScannedAt DateTime?
  expiresAt   DateTime
  
  checkIns    ValidatedCheckIn[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([poiId, status])
  @@index([token])
  @@index([used, expiresAt])
}

enum QRCodeStatus {
  ACTIVE
  EXPIRED
  REVOKED
}

enum CheckInMethod {
  GPS
  QR_CODE
  HYBRID
}

// ============================================
// STREAK GAMIFICATION SYSTEM
// ============================================

model UserStreak {
  id              String   @id @default(cuid())
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String   @unique
  
  // Current streak
  currentStreak   Int      @default(0) // Days in a row
  lastCheckInDate DateTime? // Last check-in date (UTC midnight)
  
  // Streak status
  status          StreakStatus @default(INACTIVE)
  graceEndTime    DateTime? // 12-hour grace period expiry
  
  // Lifetime stats
  longestStreak   Int      @default(0)
  totalStreakDays Int      @default(0) // All-time streak days
  streaksBroken   Int      @default(0) // Times streak was broken
  streaksRecovered Int     @default(0) // Times recovered via grace period
  
  // Milestones achieved
  milestonesReached Json   @default("[]") // [3, 7, 14, 30, 100]
  
  // Notifications
  reminderEnabled   Boolean @default(true)
  reminderTime      String? // "20:00" (8 PM local time)
  lastReminderSent  DateTime?
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  streakHistory   StreakHistory[]
  
  @@index([userId, status])
  @@index([lastCheckInDate])
}

enum StreakStatus {
  INACTIVE       // No active streak (0 days)
  ACTIVE         // Streak is active
  GRACE_PERIOD   // User missed day, has 12h to recover
  BROKEN         // Streak broken (after grace period)
}

model StreakHistory {
  id              String   @id @default(cuid())
  userStreak      UserStreak @relation(fields: [userStreakId], references: [id], onDelete: Cascade)
  userStreakId    String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  
  // Event details
  eventType       StreakEventType
  streakLength    Int      // Streak days when event occurred
  
  // Context
  checkIn         ValidatedCheckIn? @relation(fields: [checkInId], references: [id])
  checkInId       String?  @unique
  
  // Rewards
  bonusTokens     Int      @default(0)
  
  // Metadata
  metadata        Json?    // Additional context
  
  createdAt       DateTime @default(now())
  
  @@index([userId, createdAt])
  @@index([eventType, createdAt])
}

enum StreakEventType {
  STREAK_STARTED     // First check-in (day 1)
  STREAK_CONTINUED   // Daily check-in
  STREAK_MILESTONE   // Reached milestone (7, 14, 30, etc.)
  STREAK_GRACE       // Entered grace period (missed day)
  STREAK_RECOVERED   // Recovered during grace period
  STREAK_BROKEN      // Streak broken (after grace)
  STREAK_RESET       // Manual reset by user
}

model StreakMilestone {
  id              String   @id @default(cuid())
  
  // Milestone configuration
  streakDays      Int      @unique // 3, 7, 14, 30, 60, 100, 365
  name            String   // "Week Warrior", "Month Master"
  bonusTokens     Int      // Bonus tokens awarded
  
  // Badge (optional)
  badgeIcon       String?  // Emoji or icon name
  badgeColor      String?  // Hex color
  
  // Notification
  notificationTitle String
  notificationBody  String
  
  enabled         Boolean  @default(true)
  createdAt       DateTime @default(now())
  
  @@index([streakDays])
}

// ============================================
// GEOFENCE & PUSH NOTIFICATION SYSTEM
// ============================================

model SavedPOI {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  poi       POI      @relation(fields: [poiId], references: [id], onDelete: Cascade)
  poiId     String
  
  savedAt   DateTime @default(now())
  
  // Geofence metadata
  geofenceActive Boolean @default(true) // User can disable per-POI
  notifyOnEntry  Boolean @default(true)
  
  @@unique([userId, poiId])
  @@index([userId, geofenceActive])
}

model UserGeofence {
  id            String   @id @default(cuid())
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  poi           POI      @relation(fields: [poiId], references: [id], onDelete: Cascade)
  poiId         String
  
  // Geofence configuration
  platform      String   // 'ios' | 'android'
  lat           Float
  lng           Float
  radius        Int      @default(200) // meters
  
  // Status
  active        Boolean  @default(true)
  priority      Int      @default(0) // Higher = more important
  
  // Tracking
  createdAt     DateTime @default(now())
  lastTriggered DateTime?
  triggerCount  Int      @default(0)
  
  @@unique([userId, poiId, platform])
  @@index([userId, active])
  @@index([poiId, active])
}

model PushNotification {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  
  type      PushNotificationType
  title     String
  body      String
  data      Json?    // Additional payload
  
  // Delivery tracking
  sentAt    DateTime @default(now())
  delivered Boolean  @default(false)
  opened    Boolean  @default(false)
  openedAt  DateTime?
  
  // FCM tracking
  fcmMessageId String?
  fcmToken     String?
  
  @@index([userId, sentAt])
  @@index([type, sentAt])
}

enum PushNotificationType {
  GEOFENCE_ENTRY     // User entered geofence
  STREAK_REMINDER    // Remind to maintain streak
  TOKEN_MILESTONE    // Reached token threshold
  CAMPAIGN_NEW       // New campaign near user
  VOUCHER_EXPIRING   // Voucher about to expire
  SYSTEM             // System announcements
}

// ============================================
// STRIPE WEBHOOK EVENTS (Idempotency)
// ============================================

model StripeWebhookEvent {
  id              String   @id @default(cuid())
  stripeEventId   String   @unique // Stripe event.id for idempotency
  type            String   // event.type (e.g., "customer.subscription.created")
  apiVersion      String?  // Stripe API version
  
  // Payload
  data            Json     // Full event data
  
  // Processing
  processedAt     DateTime @default(now())
  processingTime  Int?     // Milliseconds
  success         Boolean  @default(true)
  error           String?  @db.Text
  
  // Retry tracking
  retryCount      Int      @default(0)
  lastRetryAt     DateTime?
  
  createdAt       DateTime @default(now())
  
  @@index([stripeEventId])
  @@index([type, createdAt])
  @@index([success, createdAt])
}
